{"version":3,"names":["mock","jest","requireActual","useNavigate","mockedUsedNavigate","require","Form","fn","afterEach","cleanup","test","handleSubmit","renderWithProviders","userEvent","type","screen","getByRole","name","getByLabelText","submitButton","click","waitFor","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","email","password"],"sources":["Form.test.js"],"sourcesContent":["import { renderWithProviders } from \"../../test-utils\";\r\nimport React from \"react\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { screen, cleanup, waitFor } from \"@testing-library/react\";\r\nimport userEvent from \"@testing-library/user-event\";\r\nconst { default: Form } = require(\"./Form\");\r\n\r\nconst mockedUsedNavigate = jest.fn();\r\n\r\njest.mock(\"react-router-dom\", () => ({\r\n  ...jest.requireActual(\"react-router-dom\"),\r\n  useNavigate: () => mockedUsedNavigate,\r\n}));\r\n\r\nafterEach(() => {\r\n  cleanup();\r\n});\r\n\r\n// test(\"on initial render, login button should be disabled\", () => {\r\n//   renderWithProviders(<Form />);\r\n//   expect(screen.getByRole(\"button\", { type: /submit/i })).toBeDisabled();\r\n// });\r\n\r\n// test(\"if form is filled, login button should be enabled\", async () => {\r\n//   renderWithProviders(<Form />);\r\n//   await userEvent.type(\r\n//     screen.getByRole(\"textbox\", { name: /email/i }),\r\n//     \"someemail@test.com\"\r\n//   );\r\n//   await userEvent.type(screen.getByLabelText(/password/i), \"1234567890\");\r\n\r\n//   expect(screen.getByRole(\"button\", { type: /submit/i })).toBeEnabled();\r\n// });\r\n\r\ntest(\"Success submit\", async () => {\r\n  const handleSubmit = jest.fn();\r\n  renderWithProviders(<Form onSubmit={handleSubmit} />);\r\n\r\n  await userEvent.type(\r\n    screen.getByRole(\"textbox\", { name: /email/i }),\r\n    \"someemail@test.com\"\r\n  );\r\n  await userEvent.type(screen.getByLabelText(/password/i), \"1234567890\");\r\n\r\n  const submitButton = screen.getByRole(\"button\", { type: /submit/i });\r\n  await userEvent.click(submitButton);\r\n\r\n  await waitFor(() => {\r\n    expect(handleSubmit).toHaveBeenCalledTimes(1);\r\n    expect(handleSubmit).toHaveBeenCalledWith({\r\n      email: \"someemail@test.com\",\r\n      password: \"1234567890\",\r\n    });\r\n  });\r\n});\r\n\r\n// test(\"wrong email validation doesnt pass\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, \"aaa\");\r\n\r\n//   await waitFor(() => {\r\n//     expect(emailInput.value).toEqual(\"aaa\");\r\n//   });\r\n\r\n//   const emailError = screen.queryByTestId(\"emailError\");\r\n//   console.log(emailInput);\r\n//   console.log(emailError);\r\n// });\r\n\r\n// test(\"email validation works\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, \"someemail@test.com\");\r\n\r\n//   await waitFor(() => {\r\n//     expect(input.value).toEqual(\"someemail@test.com\");\r\n//   });\r\n\r\n// });\r\n\r\n// test(\"if form is filled, login button should be enabled\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, 'someemail@test.com');\r\n\r\n//   await waitFor(() => { expect(input.value).toEqual('Test') });\r\n\r\n//   userEvent.clear(input);\r\n//   userEvent.type(input, '@#$%');\r\n\r\n//   await waitFor(() => { expect(input.value).toEqual('@#$%') });\r\n\r\n//   await userEvent.type(\r\n//     screen.getByRole(\"textbox\", { name: /email/i }),\r\n//     \"someemail@test.com\"\r\n//   );\r\n//   await userEvent.type(screen.getByLabelText(/password/i), \"1234567890\");\r\n\r\n//   expect(screen.getByRole(\"button\", { type: \"submit\" })).toBeEnabled();\r\n// });\r\n"],"mappings":";;AASA,cAAKA,IAAI,CAAC,kBAAkB,EAAE;EAAA,uCACzBC,IAAI,CAACC,aAAa,CAAC,kBAAkB,CAAC;IACzCC,WAAW,EAAE;MAAA,OAAMC,kBAAkB;IAAA;EAAA;AAAA,CACrC,CAAC;AAAC;AAZJ;AACA;AACA;AACA;AACA;AAAoD;AAAA,+CAHpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAIA,eAA0BC,OAAO,CAAC,QAAQ,CAAC;EAA1BC,IAAI;AAErB,IAAMF,kBAAkB,GAAGH,IAAI,CAACM,EAAE,EAAE;AAOpCC,SAAS,CAAC,YAAM;EACd,IAAAC,eAAO,GAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEAC,IAAI,CAAC,gBAAgB,0EAAE;EAAA;EAAA;IAAA;MAAA;QAAA;UACfC,YAAY,GAAGV,IAAI,CAACM,EAAE,EAAE;UAC9B,IAAAK,8BAAmB,gBAAC,gCAAC,IAAI;YAAC,QAAQ,EAAED;UAAa,EAAG,CAAC;UAAC;UAAA,OAEhDE,qBAAS,CAACC,IAAI,CAClBC,cAAM,CAACC,SAAS,CAAC,SAAS,EAAE;YAAEC,IAAI,EAAE;UAAS,CAAC,CAAC,EAC/C,oBAAoB,CACrB;QAAA;UAAA;UAAA,OACKJ,qBAAS,CAACC,IAAI,CAACC,cAAM,CAACG,cAAc,CAAC,WAAW,CAAC,EAAE,YAAY,CAAC;QAAA;UAEhEC,YAAY,GAAGJ,cAAM,CAACC,SAAS,CAAC,QAAQ,EAAE;YAAEF,IAAI,EAAE;UAAU,CAAC,CAAC;UAAA;UAAA,OAC9DD,qBAAS,CAACO,KAAK,CAACD,YAAY,CAAC;QAAA;UAAA;UAAA,OAE7B,IAAAE,eAAO,EAAC,YAAM;YAClBC,MAAM,CAACX,YAAY,CAAC,CAACY,qBAAqB,CAAC,CAAC,CAAC;YAC7CD,MAAM,CAACX,YAAY,CAAC,CAACa,oBAAoB,CAAC;cACxCC,KAAK,EAAE,oBAAoB;cAC3BC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CACH,GAAC;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA"}