{"version":3,"names":["mock","jest","requireActual","useNavigate","mockedUsedNavigate","require","Form","fn","afterEach","cleanup","test","renderWithProviders","expect","screen","getByRole","type","toBeDisabled","emailInput","name","userEvent","fireEvent","blur","passwordInput","getByLabelText","clear","toBeEnabled"],"sources":["Form.test.js"],"sourcesContent":["import { renderWithProviders } from \"../../test-utils\";\r\nimport React from \"react\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { screen, cleanup, waitFor, fireEvent } from \"@testing-library/react\";\r\nimport userEvent from \"@testing-library/user-event\";\r\nconst { default: Form } = require(\"./Form\");\r\n\r\nconst mockedUsedNavigate = jest.fn();\r\n\r\njest.mock(\"react-router-dom\", () => ({\r\n  ...jest.requireActual(\"react-router-dom\"),\r\n  useNavigate: () => mockedUsedNavigate,\r\n}));\r\n\r\nafterEach(() => {\r\n  cleanup();\r\n});\r\n\r\ntest(\"on initial render, login button should be disabled\", () => {\r\n  renderWithProviders(<Form />);\r\n  expect(screen.getByRole(\"button\", { type: /submit/i })).toBeDisabled();\r\n});\r\n\r\ntest(\"with validation error, login button should be disabled\", async () => {\r\n  renderWithProviders(<Form />);\r\n  const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n  await userEvent.type(emailInput, \"aaa\");\r\n\r\n  fireEvent.blur(emailInput);\r\n\r\n  const passwordInput = screen.getByLabelText(/password/i);\r\n  await userEvent.type(passwordInput, \"1234567890\");\r\n\r\n  fireEvent.blur(passwordInput);\r\n\r\n  expect(screen.getByRole(\"button\", { type: /submit/i })).toBeDisabled();\r\n  userEvent.clear(emailInput);\r\n  userEvent.clear(passwordInput);\r\n});\r\n\r\ntest(\"if form is filled, login button should be enabled\", async () => {\r\n  renderWithProviders(<Form />);\r\n\r\n  const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n  await userEvent.type(emailInput, \"someemail@test.com\");\r\n  const passwordInput = screen.getByLabelText(/password/i);\r\n  await userEvent.type(passwordInput, \"1234567890\");\r\n\r\n  expect(screen.getByRole(\"button\", { type: /submit/i })).toBeEnabled();\r\n\r\n  userEvent.clear(emailInput);\r\n  userEvent.clear(passwordInput);\r\n});\r\n\r\n// test(\"Success submit\", async () => {\r\n//   const handleSubmit = jest.fn();\r\n//   renderWithProviders(<Form onSubmit={handleSubmit} />);\r\n\r\n//   await userEvent.type(\r\n//     screen.getByRole(\"textbox\", { name: /email/i }),\r\n//     \"someemail@test.com\"\r\n//   );\r\n//   await userEvent.type(screen.getByLabelText(/password/i), \"1234567890\");\r\n\r\n//   const submitButton = screen.getByRole(\"button\", { type: /submit/i });\r\n//   await userEvent.click(submitButton);\r\n\r\n//   await waitFor(\r\n//     () => {\r\n//       expect(handleSubmit).toHaveBeenCalledTimes(1);\r\n//       expect(handleSubmit).toHaveBeenCalledWith({\r\n//         email: \"someemail@test.com\",\r\n//         password: \"1234567890\",\r\n//       });\r\n//     },\r\n//     { timeout: 4000 }\r\n//   );\r\n// });\r\n\r\n// test(\"wrong email validation doesnt pass\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, \"aaa\");\r\n\r\n//   await waitFor(() => {\r\n//     expect(emailInput.value).toEqual(\"aaa\");\r\n//   });\r\n\r\n//   const emailError = screen.queryByTestId(\"emailError\");\r\n//   console.log(emailInput);\r\n//   console.log(emailError);\r\n// });\r\n\r\n// test(\"email validation works\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, \"someemail@test.com\");\r\n\r\n//   await waitFor(() => {\r\n//     expect(input.value).toEqual(\"someemail@test.com\");\r\n//   });\r\n\r\n// });\r\n\r\n// test(\"if form is filled, login button should be enabled\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, 'someemail@test.com');\r\n\r\n//   await waitFor(() => { expect(input.value).toEqual('Test') });\r\n\r\n//   userEvent.clear(input);\r\n//   userEvent.type(input, '@#$%');\r\n\r\n//   await waitFor(() => { expect(input.value).toEqual('@#$%') });\r\n\r\n//   await userEvent.type(\r\n//     screen.getByRole(\"textbox\", { name: /email/i }),\r\n//     \"someemail@test.com\"\r\n//   );\r\n//   await userEvent.type(screen.getByLabelText(/password/i), \"1234567890\");\r\n\r\n//   expect(screen.getByRole(\"button\", { type: \"submit\" })).toBeEnabled();\r\n// });\r\n"],"mappings":"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"}