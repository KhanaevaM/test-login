{"version":3,"names":["mock","jest","requireActual","useNavigate","mockedUsedNavigate","require","Form","fn","afterEach","cleanup","test","renderWithProviders","expect","screen","getByRole","type","toBeDisabled","emailInput","name","userEvent","passwordInput","getByLabelText","toBeEnabled","clear","handleSubmit","fireEvent","blur","submitButton","MouseEvent","bubbles","act","click","toHaveBeenCalled","waitFor","toHaveBeenCalledTimes","toHaveBeenCalledWith","email","password"],"sources":["Form.test.js"],"sourcesContent":["import { renderWithProviders } from \"../../test-utils\";\r\nimport React from \"react\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { screen, cleanup, waitFor, fireEvent } from \"@testing-library/react\";\r\nimport userEvent from \"@testing-library/user-event\";\r\nimport { act } from \"react-test-renderer\";\r\nconst { default: Form } = require(\"./Form\");\r\n\r\nconst mockedUsedNavigate = jest.fn();\r\n\r\njest.mock(\"react-router-dom\", () => ({\r\n  ...jest.requireActual(\"react-router-dom\"),\r\n  useNavigate: () => mockedUsedNavigate,\r\n}));\r\n\r\nafterEach(() => {\r\n  cleanup();\r\n});\r\n\r\ntest(\"on initial render, login button should be disabled\", () => {\r\n  renderWithProviders(<Form />);\r\n  expect(screen.getByRole(\"button\", { type: /submit/i })).toBeDisabled();\r\n});\r\n\r\ntest(\"if form is filled, login button should be enabled\", async () => {\r\n  renderWithProviders(<Form />);\r\n\r\n  const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n  await userEvent.type(emailInput, \"someemail@test.com\");\r\n  const passwordInput = screen.getByLabelText(/password/i);\r\n  await userEvent.type(passwordInput, \"1234567890\");\r\n\r\n  expect(screen.getByRole(\"button\", { type: /submit/i })).toBeEnabled();\r\n\r\n  userEvent.clear(emailInput);\r\n  userEvent.clear(passwordInput);\r\n});\r\n\r\ntest(\"Success submit\", async () => {\r\n  const handleSubmit = jest.fn();\r\n  renderWithProviders(<Form onSubmit={handleSubmit} />);\r\n\r\n  const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n  await userEvent.type(emailInput, \"someemail@test.com\");\r\n  await fireEvent.blur(emailInput);\r\n  const passwordInput = screen.getByLabelText(/password/i);\r\n  await userEvent.type(passwordInput, \"1234567890\");\r\n  await fireEvent.blur(passwordInput);\r\n\r\n  const submitButton = screen.getByRole(\"button\", { type: /submit/i });\r\n  //await userEvent.click(submitButton);\r\n  fireEvent(submitButton, new MouseEvent(\"click\", { bubbles: true }));\r\n\r\n  //const form = screen.getByRole(\"form\", { name: \"\" });\r\n\r\n  //await form.simulate(\"submit\");\r\n\r\n  await act(() => {\r\n    userEvent.click(submitButton);\r\n    //link.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\r\n  });\r\n\r\n  expect(handleSubmit).toHaveBeenCalled();\r\n\r\n  await waitFor(() => {\r\n    expect(handleSubmit).toHaveBeenCalledTimes(1);\r\n    expect(handleSubmit).toHaveBeenCalledWith({\r\n      email: \"someemail@test.com\",\r\n      password: \"1234567890\",\r\n    });\r\n  });\r\n});\r\n\r\n// test(\"wrong email validation doesnt pass\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, \"aaa\");\r\n\r\n//   await waitFor(() => {\r\n//     expect(emailInput.value).toEqual(\"aaa\");\r\n//   });\r\n\r\n//   const emailError = screen.queryByTestId(\"emailError\");\r\n//   console.log(emailInput);\r\n//   console.log(emailError);\r\n// });\r\n\r\n// test(\"email validation works\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, \"someemail@test.com\");\r\n\r\n//   await waitFor(() => {\r\n//     expect(input.value).toEqual(\"someemail@test.com\");\r\n//   });\r\n\r\n// });\r\n\r\n// test(\"if form is filled, login button should be enabled\", async () => {\r\n//   const emailInput = screen.getByRole(\"textbox\", { name: /email/i });\r\n\r\n//   userEvent.clear(emailInput);\r\n//   userEvent.type(emailInput, 'someemail@test.com');\r\n\r\n//   await waitFor(() => { expect(input.value).toEqual('Test') });\r\n\r\n//   userEvent.clear(input);\r\n//   userEvent.type(input, '@#$%');\r\n\r\n//   await waitFor(() => { expect(input.value).toEqual('@#$%') });\r\n\r\n//   await userEvent.type(\r\n//     screen.getByRole(\"textbox\", { name: /email/i }),\r\n//     \"someemail@test.com\"\r\n//   );\r\n//   await userEvent.type(screen.getByLabelText(/password/i), \"1234567890\");\r\n\r\n//   expect(screen.getByRole(\"button\", { type: \"submit\" })).toBeEnabled();\r\n// });\r\n"],"mappings":";;AAUA,cAAKA,IAAI,CAAC,kBAAkB,EAAE;EAAA,uCACzBC,IAAI,CAACC,aAAa,CAAC,kBAAkB,CAAC;IACzCC,WAAW,EAAE;MAAA,OAAMC,kBAAkB;IAAA;EAAA;AAAA,CACrC,CAAC;AAAC;AAbJ;AACA;AACA;AACA;AACA;AACA;AAA0C;AAAA,+CAJ1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKA,eAA0BC,OAAO,CAAC,QAAQ,CAAC;EAA1BC,IAAI;AAErB,IAAMF,kBAAkB,GAAGH,IAAI,CAACM,EAAE,EAAE;AAOpCC,SAAS,CAAC,YAAM;EACd,IAAAC,eAAO,GAAE;AACX,CAAC,CAAC;AAEFC,IAAI,CAAC,oDAAoD,EAAE,YAAM;EAC/D,IAAAC,8BAAmB,gBAAC,gCAAC,IAAI,OAAG,CAAC;EAC7BC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,QAAQ,EAAE;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC,CAAC,CAACC,YAAY,EAAE;AACxE,CAAC,CAAC;AAEFN,IAAI,CAAC,mDAAmD,0EAAE;EAAA;EAAA;IAAA;MAAA;QAAA;UACxD,IAAAC,8BAAmB,gBAAC,gCAAC,IAAI,OAAG,CAAC;UAEvBM,UAAU,GAAGJ,cAAM,CAACC,SAAS,CAAC,SAAS,EAAE;YAAEI,IAAI,EAAE;UAAS,CAAC,CAAC;UAAA;UAAA,OAC5DC,qBAAS,CAACJ,IAAI,CAACE,UAAU,EAAE,oBAAoB,CAAC;QAAA;UAChDG,aAAa,GAAGP,cAAM,CAACQ,cAAc,CAAC,WAAW,CAAC;UAAA;UAAA,OAClDF,qBAAS,CAACJ,IAAI,CAACK,aAAa,EAAE,YAAY,CAAC;QAAA;UAEjDR,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,QAAQ,EAAE;YAAEC,IAAI,EAAE;UAAU,CAAC,CAAC,CAAC,CAACO,WAAW,EAAE;UAErEH,qBAAS,CAACI,KAAK,CAACN,UAAU,CAAC;UAC3BE,qBAAS,CAACI,KAAK,CAACH,aAAa,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAChC,GAAC;AAEFV,IAAI,CAAC,gBAAgB,0EAAE;EAAA;EAAA;IAAA;MAAA;QAAA;UACfc,YAAY,GAAGvB,IAAI,CAACM,EAAE,EAAE;UAC9B,IAAAI,8BAAmB,gBAAC,gCAAC,IAAI;YAAC,QAAQ,EAAEa;UAAa,EAAG,CAAC;UAE/CP,UAAU,GAAGJ,cAAM,CAACC,SAAS,CAAC,SAAS,EAAE;YAAEI,IAAI,EAAE;UAAS,CAAC,CAAC;UAAA;UAAA,OAC5DC,qBAAS,CAACJ,IAAI,CAACE,UAAU,EAAE,oBAAoB,CAAC;QAAA;UAAA;UAAA,OAChDQ,iBAAS,CAACC,IAAI,CAACT,UAAU,CAAC;QAAA;UAC1BG,aAAa,GAAGP,cAAM,CAACQ,cAAc,CAAC,WAAW,CAAC;UAAA;UAAA,OAClDF,qBAAS,CAACJ,IAAI,CAACK,aAAa,EAAE,YAAY,CAAC;QAAA;UAAA;UAAA,OAC3CK,iBAAS,CAACC,IAAI,CAACN,aAAa,CAAC;QAAA;UAE7BO,YAAY,GAAGd,cAAM,CAACC,SAAS,CAAC,QAAQ,EAAE;YAAEC,IAAI,EAAE;UAAU,CAAC,CAAC,EACpE;UACA,IAAAU,iBAAS,EAACE,YAAY,EAAE,IAAIC,UAAU,CAAC,OAAO,EAAE;YAAEC,OAAO,EAAE;UAAK,CAAC,CAAC,CAAC;;UAEnE;;UAEA;UAAA;UAAA,OAEM,IAAAC,sBAAG,EAAC,YAAM;YACdX,qBAAS,CAACY,KAAK,CAACJ,YAAY,CAAC;YAC7B;UACF,CAAC,CAAC;QAAA;UAEFf,MAAM,CAACY,YAAY,CAAC,CAACQ,gBAAgB,EAAE;UAAC;UAAA,OAElC,IAAAC,eAAO,EAAC,YAAM;YAClBrB,MAAM,CAACY,YAAY,CAAC,CAACU,qBAAqB,CAAC,CAAC,CAAC;YAC7CtB,MAAM,CAACY,YAAY,CAAC,CAACW,oBAAoB,CAAC;cACxCC,KAAK,EAAE,oBAAoB;cAC3BC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CACH,GAAC;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA"}